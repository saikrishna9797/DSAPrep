class Solution {
public:
    int solve(vector<int> &coins,int indx,int amount,vector<vector<int>> &dp)
    {
        if(amount == 0)return 0;
        
        if(indx < 0)return 1e9;

        if(dp[indx][amount] != -1)return dp[indx][amount];

        int notTake = solve(coins,indx-1,amount,dp);

        int take = 1e9;

        if(amount>=coins[indx])
        {
            take = 1 + solve(coins,indx,amount-coins[indx],dp);
        }

        return dp[indx][amount] = min(take,notTake);
    }
    int coinChange(vector<int>& coins, int amount) {
        int n = coins.size();
        if(amount == 0)return 0;

        vector<vector<int>>dp(n+1,vector<int>(amount+1,-1));
        int ans = solve(coins,n-1,amount,dp);

        if(ans>=1e9)return -1;

        // for(int i=0;i<=n;i++)
        // {
        //     for(int j=0;j<=amount;j++)cout<<dp[i][j]<<" ";
        //     cout<<endl;
        // }

        return ans;
    }
};
