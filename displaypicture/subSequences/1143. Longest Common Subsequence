class Solution {
public:
    int solve(string s1,string s2,int indx1,int indx2,vector<vector<int>> &dp)
    {
        
        int n = s1.size(), m = s2.size();
        if(indx1 == n || indx2 == m)
            return 0;

        if(dp[indx1][indx2] != -1)
            return dp[indx1][indx2];

        if(s1[indx1] == s2[indx2])
            return dp[indx1][indx2] = 1 + solve(s1,s2,indx1+1,indx2+1,dp);
        

        return dp[indx1][indx2] = max(solve(s1,s2,indx1+1,indx2,dp),
        solve(s1,s2,indx1,indx2+1,dp));
    }
    int longestCommonSubsequence(string text1, string text2) {
        // int ans;
        int n = text1.size(), m = text2.size();
        vector<vector<int>>dp(n+1,vector<int>(m+1,0));
        // return solve(text1,text2,0,0,dp);
        // return dp[n-1][m-1];

        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                if(text1[i-1] == text2[j-1])
                {
                    dp[i][j] = 1 + dp[i-1][j-1];
                }
                else if(text1[i-1] != text2[j-1])
                {
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }

        int ans = dp[n][m];

        return ans;

    }
};
