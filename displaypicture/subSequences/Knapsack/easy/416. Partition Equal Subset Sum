class Solution {
public:
    bool solve(vector<int> &nums,int indx,int sum,vector<vector<int>> &dp)
    {
        if(sum == 0)return true;
        else if(indx == nums.size())return false;

        if(dp[indx][sum] != -1)return dp[indx][sum];

        if(sum>=nums[indx])
        {
            return dp[indx][sum] = solve(nums,indx+1,sum-nums[indx],dp) || solve(nums,indx+1,sum,dp);
        }

        return dp[indx][sum] = solve(nums,indx+1,sum,dp);
    }
    bool canPartition(vector<int>& nums) {
        int n = nums.size();

        int sum = 0;

        for(auto ele:nums)sum += ele;

        if(sum%2 == 1)return false;

        sum = sum/2;

        vector<vector<int>>dp(n+1,vector<int>(sum+1,-1));

        return solve(nums,0,sum,dp);

    }
};
