
void dfs(vector<vector<int>>&adj,int indx,vector<int> &vist)
{
    if(vist[indx] != 1)
    {
        vist[indx] = 1;
        for(auto ele:adj[indx])
        {
            if(vist[ele] != 1)
            dfs(adj,ele,vist);
        }
    }
}

class Solution {
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();

        int ans = 0;

        vector<int>vist1(n+1,0);
        vector<int>vist2(n+1,0);

        vector<vector<int>>adj(n+1);

        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(i != j && isConnected[i][j] == 1)
                {
                    // if(vist1[i+1] != 1)
                    adj[i+1].push_back(j+1);
                    // if(vist1[j+1] != 1)
                    adj[j+1].push_back(i+1);
                    vist1[i+1] = 1;
                    vist1[j+1] = 1;
                }
            }
        }

        for(int i=1;i<n+1;i++)
        {
            for(int j = 0;j<adj[i].size();j++)
            {
                cout<<adj[i][j]<<" ";
            }
            cout<<endl;
        }

        for(int i = 1;i<=n;i++)
        {
            if(vist2[i] != 1)
            {
                ans += 1;
                dfs(adj,i,vist2);
            }
            
        }

        return ans;
    }
};
