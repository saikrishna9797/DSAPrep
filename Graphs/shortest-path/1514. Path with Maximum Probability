class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start_node, int end_node) {
        vector<vector<pair<int,double>>>adj(n);

        for(int i=0;i<edges.size();i++)
        {
            adj[edges[i][0]].push_back({edges[i][1],succProb[i]});
            adj[edges[i][1]].push_back({edges[i][0],succProb[i]});
        }

        // priority_queue<pair<double,int>,vector<pair<double,int>>,
        // greater<pair<double,int>>>pq;

        priority_queue<pair<double,int>>pq;

        double temp = 1;
        pq.push({temp,start_node});

        vector<double>p(n,0);

        p[start_node] = 1;

        while(!pq.empty())
        {
            int node = pq.top().second;
            double prob = pq.top().first;
            pq.pop();

            if(node == end_node)return  prob;

            for(auto ele:adj[node])
            {
                if(ele.second*prob>p[ele.first])
                {
                    pq.push({ele.second*prob,ele.first});
                    p[ele.first] = ele.second*prob;
                }
            }


        }

        double ans = p[end_node];

        return ans;

    }
};
