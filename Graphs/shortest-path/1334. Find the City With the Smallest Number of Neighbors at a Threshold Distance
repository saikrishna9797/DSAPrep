class Solution {
public:
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        
       vector<vector<pair<int,int>>>adj(n);

       for(int i=0;i<edges.size();i++)
       {
            adj[edges[i][0]].push_back({edges[i][1],edges[i][2]});
            adj[edges[i][1]].push_back({edges[i][0],edges[i][2]});
       }
       vector<int>numCities(n,0);

       for(int i=0;i<n;i++)
       {
            vector<int>dist(n,INT_MAX);
            dist[i]= 0;

            priority_queue<pair<int,int>,vector<pair<int,int>>,
            greater<pair<int,int>>>pq;

            

            pq.push({0,i});

            while(!pq.empty())
            {
                int node = pq.top().second;
                int pathDist = pq.top().first;
                pq.pop();

                for(auto ele:adj[node])
                {
                    int curDis= ele.second;
                    int nNode = ele.first;;

                    if(pathDist+curDis<=dist[nNode])
                    {
                        dist[nNode] = pathDist+curDis;
                        pq.push({dist[nNode],nNode});
                    }
                }
            }

            for(int j=0;j<n;j++)
            {
                if(dist[j]<=distanceThreshold && i!=j)
                {
                    numCities[j] += 1;
                }
            }
       }
       int ans;
       int mxCities = INT_MAX;

       for(int i = 0;i<n;i++)
       {
        cout<<i<<" "<<numCities[i]<<endl;
            if(mxCities>=numCities[i])
            {
                ans = i;
                mxCities = numCities[i];
            }
       }

       return ans;
    }
};
