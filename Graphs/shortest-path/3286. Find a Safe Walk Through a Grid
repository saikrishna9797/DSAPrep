class Solution {
public:
    bool findSafeWalk(vector<vector<int>>& grid, int health) {
        int n = grid.size();
        int m = grid[0].size();

        int numOfNodes = n*m;

        vector<vector<pair<int,int>>>adj(numOfNodes);
        

        for(int i=0;i<n;i++)
        {
            
            
            for(int j = 0;j<m;j++)
            {
                
                int arr1[4] = {-1,0,1,0};
                int arr2[4] = {0,1,0,-1};
                int node = i*m+j;
                for(int k=0;k<4;k++)
                {
                    
                    if(i+arr1[k]>=0 && i+arr1[k]<n &&
                    j+arr2[k]>=0 && j+arr2[k]<m)
                    {
                        int nNode = (i+arr1[k])*m + j+arr2[k];
                        if(grid[i+arr1[k]][j+arr2[k]] == 1)
                        {
                            adj[node].push_back({nNode,1});
                        }
                        else
                        {
                            adj[node].push_back({nNode,0});
                        }
                    }
                }
            }
        }

        // for(int i=0;i<numOfNodes;i++)
        // {
        //     for(auto ele:adj[i])
        //     {
        //         cout<<i<<"->"<<ele.first<<" ("<<ele.second<<")"<<endl;
        //     }
        // }
        
        priority_queue<pair<int,int>,
        vector<pair<int,int>>,
        greater<pair<int,int>>>pq;

        if(grid[0][0] == 1)
        {
            pq.push({1,0});
        }
        else pq.push({0,0});

        vector<int>distances(numOfNodes,INT_MAX);

        while(!pq.empty())
        {
            int node = pq.top().second;
            int dis = pq.top().first;
            pq.pop();

            if(dis>distances[node])continue;

            for(auto ele:adj[node])
            {
                if(distances[ele.first]>dis+ele.second)
                {
                    pq.push({dis+ele.second,ele.first});
                    distances[ele.first] = dis+ele.second;
                }
            }

        }

        if(distances[numOfNodes-1]<health)return true;
        return false;
    }
};
