

bool dfs(vector<vector<int>> &adj,vector<bool> &vist,
vector<bool> &pathVist,int node)
{
    vist[node] = true;
    pathVist[node] = true;
    
    for(auto ele:adj[node])
    {
        if(!vist[ele])
        if(dfs(adj,vist,pathVist,ele))return true;
        
        if(vist[ele] && pathVist[ele])return true;
    }
    
    pathVist[node] = false;
    return false;
}


class Solution {
  public:
    // Function to detect cycle in a directed graph.
    bool isCyclic(vector<vector<int>> &adj) {
        // code here
        int n = adj.size();
        
        vector<bool>vist(n,false);
        vector<bool>pathVist(n,false);
        
        for(int i=0;i<n;i++)
        {
            if(!vist[i])
            {
                if(dfs(adj,vist,pathVist,i))return true;        
            }
        }
        
        return false;
    }
};
