
class Solution {
  public:
    int CheapestFLight(int n, vector<vector<int>>& flights, int src, int dst, int K)  {
        // Code here
        vector<vector<pair<int,int>>>adj(n);
        
        for(int i=0;i<flights.size();i++)
        {
            adj[flights[i][0]].push_back({flights[i][1],flights[i][2]});
        }
        
        priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,
        greater<pair<int,pair<int,int>>>>pq;
        
        pq.push({0,{src,0}});
        
        vector<int>distances(n,INT_MAX);
        vector<int>Stops(n,INT_MAX);
        distances[src] = 0;
        Stops[src] = 0;
        
        while(!pq.empty())
        {
            int stops = pq.top().first;
            int node = pq.top().second.first;
            int dis = pq.top().second.second;
            pq.pop();
            
            if(stops > K)continue;
            
            for(auto ele:adj[node])
            {
                // int curStops = stops + 1;
                int curDis = dis + ele.second;
                
                if(curDis<distances[ele.first] && stops<=K)
                {
                    distances[ele.first] = curDis;
                    pq.push({stops+1,{ele.first,curDis}});
                }
            }
        }
        
        if(distances[dst] == INT_MAX)return -1;
        // else if(K+1<Stops[dst])return -1;
        return distances[dst];
    }
};
