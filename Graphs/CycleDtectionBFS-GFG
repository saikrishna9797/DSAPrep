
class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool isCycle(vector<vector<int>>& adj) {
        // Code here
        int n = adj.size();
        
        vector<int>vist(n,0);
        
        for(int i=0;i<n;i++)
        {
            if(vist[i] != 1)
            {
                queue<pair<int,int>>q;
                q.push({i,-1});
                
                while(!q.empty())
                {
                    int siz = q.size();
                    
                    for(int j = 0;j<siz;j++)
                    {
                        int node = q.front().first;
                        int parent = q.front().second;
                        q.pop();
                        
                        vist[node] = 1;
                        
                        for(auto ele:adj[node])
                        {
                            if(vist[ele] != 0 && ele != parent)return true;
                            else if(vist[ele] == 0)
                            {
                                q.push({ele,node});
                            }
                        }
                    }
                }
            }
        }
        
        return false;
        
        
        
    }
};
