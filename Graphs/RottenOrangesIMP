class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        int ans = 0;

        vector<vector<int>>vist(n,vector<int>(m,0));

        int fresh = 0;
        queue<pair<int,int>>st;

        for(int i=0;i<n;i++)
        for(int j=0;j<m;j++)
        {
            if(grid[i][j] == 1)
            {
                fresh += 1;
            }
            else if(grid[i][j] == 2)
            {
                st.push({i,j});
                vist[i][j] = 1;
            }
        }

        if(fresh == 0)return 0;

        int cnt = 0;

        while(!st.empty())
        {
            bool thereOrNot = false;
            int siz = st.size();
            for(int i=0;i<siz;i++)
            {
                int r = st.front().first;
                int c = st.front().second;
                st.pop();
                
                    int arr1[4] = {-1,0,1,0};
                    int arr2[4] = {0,1,0,-1};

                    for(int j = 0;j<4;j++)
                    {
                        int nr = arr1[j] + r;
                        int nc = arr2[j] + c;

                        if(nr>=0 && nr<n && nc>=0 && nc<m && vist[nr][nc] == 0
                        && grid[nr][nc] == 1)
                        {
                            vist[nr][nc] = 1;
                            st.push({nr,nc});
                            fresh -= 1;
                            thereOrNot = true;
                        }
                    }
            }
            if(thereOrNot)
            ans += 1;

        }

        if(fresh != 0)return -1;

        return ans;


    }
};
