
class Solution {
  public:
    // Function to find distance of nearest 1 in the grid for each cell.
    vector<vector<int>> nearest(vector<vector<int>>& grid) {
        // Code here
        int n = grid.size();
        int m = grid[0].size();
        
        vector<vector<int>>ans(n,vector<int>(m,0));
        
        queue<pair<int,int>>q;
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j] == 1)q.push({i,j});
            }
        }
        
        vector<vector<int>>vist(n,vector<int>(m,0));
        
        while(!q.empty())
        {
            int r = q.front().first;
            int c = q.front().second;
            q.pop();
            
            if(vist[r][c] != 1)
            {
                vist[r][c] = 1;
            
                int arr1[4] = {-1,0,1,0};
                int arr2[4] = {0,1,0,-1};
                
                for(int i=0;i<4;i++)
                {
                    int nr = r + arr1[i];
                    int nc = c + arr2[i];
                    
                    if(nr>=0 && nc>=0 && nc<m && nr<n &&
                    vist[nr][nc] != 1 && grid[nr][nc] == 0 &&
                    ans[nr][nc] == 0)
                    {
                        // vist[nr][nc] = 1;
                        ans[nr][nc] = ans[r][c] + 1;
                        q.push({nr,nc});
                    }
                }
                
            }
        }
        
        return ans;
       
    }
};
