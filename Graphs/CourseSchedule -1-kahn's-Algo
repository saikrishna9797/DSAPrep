class Solution {
  public:
    bool isPossible(int N, int P, vector<pair<int, int> >& prerequisites) {
        // Code here
        vector<int>inDegree(N,0);
        
        for(int i=0;i<prerequisites.size();i++)
        {
            inDegree[prerequisites[i].first] += 1;
        }
        
        queue<int>q;
        
        for(int i=0;i<N;i++)
        {
            if(inDegree[i] == 0)
            {
                q.push(i);
            }
        }
        int ans = 0;
        
        vector<vector<int>>adj(N);
        
        for(int i=0;i<prerequisites.size();i++)
        {
            adj[prerequisites[i].second].push_back(prerequisites[i].first);
        }
        
        while(!q.empty())
        {
            int node = q.front();
            q.pop();
            
            for(auto ele:adj[node])
            {
                inDegree[ele] -= 1;
                if(inDegree[ele] == 0)q.push(ele);
            }
            ans += 1;
        }
        
        if(ans == N)return true;
        
        return false;
        
    }
};
