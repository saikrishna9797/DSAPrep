
class disjointSet
{
    public:

        vector<int>parent;
        vector<int>size;

        disjointSet(int n)
        {
            parent.resize(n);
            size.resize(n,1);

            for(int i=0;i<n;i++)parent[i] = i;
        }

        int findUParent(int node)
        {
            if(parent[node] == node)return node;

            return parent[node] =  findUParent(parent[node]);
        }

        void unionBySize(int node1,int node2)
        {
            int parNode1 = findUParent(node1);
            int parNode2 = findUParent(node2);

            if(parNode1 == parNode2)return;

            if(size[parNode1]>size[parNode2])
            {
                parent[parNode2] = parNode1;
                size[parNode1] += size[parNode2];
            }
            else if(size[parNode1]<=size[parNode2])
            {
                parent[parNode1] = parNode2;
                size[parNode2] += size[parNode1]; 
            }

            return;
        }
};

class Solution {
public:
    int countCompleteComponents(int n, vector<vector<int>>& edges) {
        vector<vector<int>>adj(n);

        for(int i=0;i<edges.size();i++)
        {
            adj[edges[i][0]].push_back(edges[i][1]);
            adj[edges[i][1]].push_back(edges[i][0]);
        }

        disjointSet ds(n);

        for(int i=0;i<edges.size();i++)
        {
            int node1 = edges[i][0];
            int node2 = edges[i][1];

            if(ds.findUParent(node1) == ds.findUParent(node2))continue;
            
            ds.unionBySize(node1,node2);

        }

        int ans = 0;

        vector<int>pars(n,1);

        for(int i=0;i<n;i++)
        {
            int parNode = ds.findUParent(i);
            int compSize = ds.size[parNode];

            if(adj[i].size() != compSize-1)
            {
                pars[parNode] = -1;
                pars[i] = -1;
            }
        }

        // for(int i=0;i<n;i++)
        // {
        //     cout<<i<<" "<<pars[i]<<endl;
        // }

        vector<int>vist(n,0);

        for(int i=0;i<n;i++)
        {
            int parNode = ds.findUParent(i);
            if(vist[parNode] == 0 && pars[parNode] == 1)
            {
                vist[parNode] = 1;
                ans += 1;
            }
        }

        return ans;

    }
};
