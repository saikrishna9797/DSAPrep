
class disjointSet
{
    public:
        vector<int>parent;
        vector<int>size;
        disjointSet(int n)
        {
            parent.resize(n+1);
            size.resize(n+1,1);

            for(int i=1;i<n+1;i++)parent[i] = i;
        }

        int findUParent(int node)
        {
            if(parent[node] == node)return node;
            return parent[node] = findUParent(parent[node]);
        }

        void unionBySize(int node1,int node2)
        {
            int UParentNode1 = findUParent(node1);
            int UParentNode2 = findUParent(node2);

            if(UParentNode1 == UParentNode2)return;

            if(size[UParentNode1]>size[UParentNode2])
            {
                parent[UParentNode2] = UParentNode1;
                size[UParentNode1] += size[UParentNode2];
            }
            else if(size[UParentNode1]<=size[UParentNode2])
            {
                parent[UParentNode1] = UParentNode2;
                size[UParentNode2] += size[UParentNode1];
            }
            return;
        }
};

class Solution {
public:
    int minScore(int n, vector<vector<int>>& roads) {
        
        disjointSet ds(n);
        int ans = INT_MAX;

        for(int i=0;i<roads.size();i++)
        {
            ds.unionBySize(roads[i][0],roads[i][1]);
        }

        int uParentOne = ds.findUParent(1);
        // int uParentN = ds.parent[n];
        for(int i=0;i<roads.size();i++)
        {
            int node1 = roads[i][0];
            int node2 = roads[i][1];
            int ParentNode1 = ds.findUParent(node1);
            int ParentNode2 = ds.findUParent(node2);

            // if(uParentOne == uParentN)
            if((uParentOne == ParentNode1 || uParentOne == ParentNode2)
            )
            {
                ans = min(ans,roads[i][2]);
            }
        
        }

        return ans;
    }
};
